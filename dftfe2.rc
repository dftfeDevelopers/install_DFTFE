#!/bin/rc
# Installation script for DFT-FE and its dependencies

. ./env2/env.rc


fn install_blis {
    cd $WD/src
    if(test ! -d blis-3.0.1) {
      wget 'https://github.com/amd/blis/archive/refs/tags/3.0.1.tar.gz'
      tar xzf '3.0.1.tar.gz'
      rm -f '3.0.1.tar.gz'
    }
    cd blis-3.0.1
    ./configure '--prefix='$INST \
                'CC=cc' 'CXX=CC' 'FC=ftn' \
                'CFLAGS=-O2' \
                'CPPFLAGS=-O2' \
                'FFLAGS=-O2' \
                'zen'

    make -j16
    make install
    cd $WD
}

fn install_libflame {
    cd $WD/src
    if(test ! -d libflame-5.2.0) {
      wget 'https://github.com/flame/libflame/archive/refs/tags/5.2.0.tar.gz'
      tar xzf '5.2.0.tar.gz'
      rm -f '5.2.0.tar.gz'
    }
    cd libflame-5.2.0

    ./configure '--prefix='$INST \
                'CC=cc' 'CXX=CC' 'FC=ftn' 'FC=ftn' \
                'CFLAGS=-O2' \
                'CPPFLAGS=-O2' \
                'FFLAGS=-O2' \
                '--enable-dynamic-build' \
                '--enable-lapack2flame' \
                '--enable-max-arg-list-hack'

    make -j16
    make install
    cd $WD
}



# Install alglib, libxc, spglib and p4est using the typical route (cf. manual)
fn install_alglib {
  cd $WD/src
  if(test ! -d alglib-cpp) {
    wget 'https://www.alglib.net/translator/re/alglib-3.20.0.cpp.gpl.tgz'
    tar xzf alglib-3.20.0.cpp.gpl.tgz
    rm -f alglib-3.20.0.cpp.gpl.tgz
  }
  cd alglib-cpp/src
  # TODO: change to CC (in case of linking error)
  g++ -o libAlglib.so -shared -fPIC -O2 *.cpp

  mkdir -p $INST/lib/alglib
  mv libAlglib.so $INST/lib/alglib/
  cp *.h $INST/lib/alglib/

  cd $WD
}

fn install_libxc {
  cd $WD/src
  if(test ! -d libxc-6.2.2) {
    wget 'https://gitlab.com/libxc/libxc/-/archive/6.2.2/libxc-6.2.2.tar.gz'
    tar xzf 'libxc-6.2.2.tar.gz'
    rm 'libxc-6.2.2.tar.gz'
  }
  cd libxc-6.2.2
  rm -fr build
  mkdir build && cd build
  cmake '-DCMAKE_C_COMPILER=cc' \
        '-DCMAKE_C_FLAGS=-O2 -fPIC' \
        '-DCMAKE_INSTALL_PREFIX='$INST \
        '-DBUILD_SHARED_LIBS=ON' \
        ..
  make -j16
  make install
  cd $WD
}


fn install_dftd4 {
  cd $WD/src
  if(test ! -d dftd4-3.6.0) {
    wget 'https://github.com/dftd4/dftd4/archive/refs/tags/v3.6.0.tar.gz'
    tar xzf v3.6.0.tar.gz
    rm v3.6.0.tar.gz
  }
  cd dftd4-3.6.0
  rm -fr build
  mkdir build && cd build
  cmake '-DCMAKE_Fortran_COMPILER=ftn' \
        '-DCMAKE_C_COMPILER=cc' \
        '-DBLAS_LIBRARIES='$INST/lib/libblis.so \
        '-DLAPACK_LIBRARIES='$INST/lib/libflame.so \
        '-DBUILD_SHARED_LIBS=ON' \
        '-DCMAKE_INSTALL_PREFIX='$INST \
        '-DWITH_OpenMP=OFF' \
        ..
  make -j16
  make install
  cd $WD
}

fn install_spglib {
  cd $WD/src
  if(test ! -d spglib) {
    git clone 'https://github.com/atztogo/spglib.git'
    rc -c 'cd spglib && git checkout 02159eef6e7349535049a43fe2272bb634c77945'
  }
  cd spglib
  rm -fr build
  mkdir -p build && cd build
  cmake '-DCMAKE_CXX_COMPILER=CC' \
        '-DCMAKE_C_COMPILER=cc' \
        '-DCMAKE_INSTALL_PREFIX='$INST \
        ..
  make -j16
  make install
  cd $WD
}

fn install_p4est{
  cd $WD/src
  rm -rf p4est
  mkdir p4est
  cd p4est
  wget 'https://p4est.github.io/release/p4est-2.8.6.tar.gz'
  wget 'https://raw.githubusercontent.com/dftfeDevelopers/dftfe/manual/p4est-setup-craycompiler.sh'
  chmod u+x p4est-setup-craycompiler.sh
  ./p4est-setup-craycompiler.sh p4est-2.8.6.tar.gz $INST
  cd $WD
 }

# Install netlib-scalapack 2.2.0 version linking to openblas
# note that the openblas (sourced via module) provides lapack
fn install_scalapack {
  cd $WD/src
  if(! -d scalapack-2.2.0) {
    wget 'https://github.com/Reference-ScaLAPACK/scalapack/archive/refs/tags/v2.2.0.tar.gz'
    tar xzf v2.2.0.tar.gz
    rm -f v2.2.0.tar.gz
  }
  cd scalapack-2.2.0
  
  mkdir build && cd build
  cmake \
    '-DBUILD_SHARED_LIBS=ON' \
    '-DBUILD_STATIC_LIBS=OFF' \
    '-DBUILD_TESTING=OFF' \
    '-DCMAKE_C_COMPILER=cc' \
    '-DCMAKE_Fortran_COMPILER=ftn' \
    '-DCMAKE_C_FLAGS=-fPIC -march=znver3' \
    '-DCMAKE_Fortran_FLAGS=-fPIC -march=znver3 -fallow-argument-mismatch' \
    '-DUSE_OPTIMIZED_LAPACK_BLAS=ON' \
    '-DBLAS_LIBRARIES='$INST'/lib/libblis.so' \
    '-DLAPACK_LIBRARIES='$INST'/lib/libflame.so' \
    '-DCMAKE_INSTALL_PREFIX='$INST \
    ..
  make -j16
  make install
  cd $WD
}

# Install ELPA latest version (elpa-2024.03.001) with NVIDIA GPU support
fn install_elpa {
    cd $WD/src
    if(test ! -d elpa) {
        ver=2024.03.001
        wget https://elpa.mpcdf.mpg.de/software/tarball-archive/Releases/$ver/elpa-$ver.tar.gz
        tar xzf elpa-$ver.tar.gz
        mv elpa-$ver elpa
        rm -f elpa-$ver.tar.gz
    }
    cd elpa

    LD_LIBRARY_PATH = $LD_LIBRARY_PATH:$INST/lib
    LD_LIBRARY_PATH = $LD_LIBRARY_PATH:$INST/lib64
    cflags = ('-march=znver3' -fPIC -O2 -target-accel=nvidia80 -I'$MPICH_DIR'/include)
    libs = (-L$INST/lib -lscalapack -L$INST/lib -lblis -L$INST/lib -lflame)
    cflags=$"cflags
    libs=$"libs
    rm -fr build
    mkdir build && cd build
    ../configure 'CXX=CC' 'CC=cc' 'FC=ftn' \
               'FCFLAGS=-ffree-line-length-none '$cflags \
               'CFLAGS='$cflags \
               'CXXFLAGS=-std=c++17 '$cflags \
               '--prefix='$INST \
               'LIBS='$libs \
               --disable-sse --disable-sse-assembly --disable-avx \
               --disable-avx2 --disable-avx512 '--enable-c-tests=no' \
               '--enable-option-checking=fatal' --enable-shared \
               '--enable-cpp-tests=no' '--enable-nvidia-gpu' \
               '--enable-gpu-streams=nvidia' \
               '--with-NVIDIA-GPU-compute-capability=sm_80'
               '--with-cuda-path='$CUDA_HOME \
               '--with-cuda-sdk-path='$CUDA_HOME \
               '--enable-option-checking=fatal' \
               '--without-threading-support-check-during-build'
    make -j16
    make install
    cd $WD
}

fn install_kokkos {
  cd $WD/src
  if(test ! -d kokkos-4.3.00) {
    wget 'https://github.com/kokkos/kokkos/archive/refs/tags/4.3.00.tar.gz'
    tar xzvf '4.3.00.tar.gz'
    rm '4.3.00.tar.gz'
  } 
  cd kokkos-4.3.00
  rm -fr build
  mkdir build && cd build
  cmake '-DCMAKE_C_COMPILER=cc' \
        '-DCMAKE_C_FLAGS=-O2 -fPIC' \
        '-DCMAKE_CXX_COMPILER=CC' \
        '-DCMAKE_CXX_FLAGS=-O2 -fPIC' \
        '-DCMAKE_INSTALL_PREFIX='$INST \
        ..
  make -j16
  make install
  cd $WD
} 


# Install latest release dealii from https://github.com/dealii/dealii

fn install_dealii {
  cd $WD/src
  ver=9.5.2
  if(test ! -d dealii-$ver) {
      wget https://github.com/dealii/dealii/releases/download/v$ver/dealii-$ver.tar.gz
      tar xzf dealii-$ver.tar.gz 
  }
  #if(test ! -d dealii) {
  #  git clone https://github.com/dealii/dealii.git
  #}
  cd dealii-$ver
  #cd dealii
  rm -fr build
  mkdir build && cd build
  cmake '-DCMAKE_CXX_STANDARD=17' \
        '-DCMAKE_CXX_FLAGS=-std=c++17' \
        '-DCMAKE_C_FLAGS=-std=c++17' \
        '-DDEAL_II_FORCE_BUNDLED_BOOST=ON' \
        '-DDEAL_II_ALLOW_PLATFORM_INTROSPECTION=OFF' \
        '-DKOKKOS_DIR='$INST \
        '-DDEAL_II_WITH_TASKFLOW=OFF' \
        '-DCMAKE_BUILD_TYPE=Release' \
        '-DDEAL_II_CXX_FLAGS_RELEASE=-O2' \
        '-DCMAKE_C_COMPILER=cc' \
        '-DCMAKE_CXX_COMPILER=CC' \
        '-DCMAKE_Fortran_COMPILER=ftn' \
        '-DDEAL_II_WITH_TBB=OFF' \
        '-DDEAL_II_COMPONENT_EXAMPLES=OFF' \
        '-DDEAL_II_WITH_MPI=ON' \
        '-DDEAL_II_WITH_64BIT_INDICES=ON' \
        '-DP4EST_DIR='$INST \
        '-DDEAL_II_WITH_LAPACK=ON' \
        '-DLAPACK_DIR='$OLCF_OPENBLAS_ROOT';'$INST \
        '-DLAPACK_FOUND=true' \
        '-DLAPACK_LIBRARIES='$INST/lib/libblis.so';'$INST/lib/libflame.so\
        '-DCMAKE_INSTALL_PREFIX='$INST \
        ..
  # may add to lapack libraries ';'$INST/lib64/liblapack.so \
  make -j16 || echo 1
  make install
  mv $INST/ ^ (detailed.log summary.log README.md LICENSE.md) $INST/share/deal.II/
  cd $WD
}


fn compile_dftfe_develop{
  cd $WD/src
  branch = migrateLatestDealii
  if(! test -d dftfeDevelop) {
    git clone -b $branch https://dsambit@bitbucket.org/dftfedevelopers/dftfe.git dftfeDevelop
  } if not {
    cd dftfeDevelop
    git fetch
    git checkout $branch
    git pull
  }
  cd dftfeDevelop
  rm -fr build
  SRC = `{pwd}
  mkdir build && cd build
  #cd build

  dealiiDir=$INST
  alglibDir=$INST/lib/alglib
  libxcDir=$INST
  spglibDir=$INST
  xmlIncludeDir=/usr/include/libxml2
  xmlLibDir=/usr/lib64

  ELPA_PATH=$INST
  DCCL_PATH=$NCCL_DIR
  TORCH_PATH=''

  #Compiler options and flags
  cxx_compiler = CC
  cxx_flags = '-march=znver3 -fPIC'
  cxx_flagsRelease = '-fPIC -target-accel=nvidia80 -I'$MPICH_DIR'/include'
  device_flags ='-I'$MPICH_DIR'/include -arch=sm_80'
  device_architectures =80

  # HIGHERQUAD_PSP option compiles with default or higher order
  # quadrature for storing pseudopotential data
  # ON is recommended for MD simulations with hard pseudopotentials

  # build type: "Release" or "Debug"
  build_type=Release
  out=`{echo $build_type | tr '[:upper:]' '[:lower:]'}


  # Note: MDI_PATH is not used by project.
  cmake_flags = ( \
      -DCMAKE_CXX_STANDARD=17 \
      -DCMAKE_CXX_COMPILER=$cxx_compiler \
      -DCMAKE_CXX_FLAGS=$cxx_flags \
      -DCMAKE_CXX_FLAGS_RELEASE=$cxx_flagsRelease \
      -DCMAKE_BUILD_TYPE=$build_type \
      -DDEAL_II_DIR=$dealiiDir \
      -DALGLIB_DIR=$alglibDir \
      -DLIBXC_DIR=$libxcDir \
      -DSPGLIB_DIR=$spglibDir \
      -DXML_LIB_DIR=$xmlLibDir \
      -DXML_INCLUDE_DIR=$xmlIncludeDir \
      -DWITH_MDI=OFF \
      -DMDI_PATH= \
      -DWITH_DCCL=ON \
      -DWITH_TORCH=OFF \
      -DCMAKE_PREFIX_PATH=$ELPA_PATH';'$DCCL_PATH';'$TORCH_PATH \
      -DWITH_GPU=ON \
      -DGPU_LANG=cuda \
      -DGPU_VENDOR=nvidia \
      -DWITH_GPU_AWARE_MPI=OFF \
      -DCMAKE_CUDA_FLAGS=$device_flags \
      -DCMAKE_CUDA_ARCHITECTURES=$device_architectures \
      -DWITH_TESTING=OFF \
      -DMINIMAL_COMPILE=OFF \
      -DHIGHERQUAD_PSP=OFF \
  )

  fn cmake_real {
    mkdir -p real && cd real
    cmake $cmake_flags \
      -DWITH_COMPLEX=OFF \
      $1
    make -j8
    cd ..
  }

  fn cmake_cplx {
    mkdir -p complex && cd complex
    cmake $cmake_flags \
      -DWITH_COMPLEX=ON \
      $1
    make -j8
    cd ..
  }

  mkdir -p $out
  cd $out

  echo 'Building Real executable in $build_type mode...'
  cmake_real $SRC

  echo 'Building Complex executable in $build_type mode...'
  cmake_cplx $SRC

  echo 'Build complete.'
  cd $WD
}


fn compile_dftfe{
  cd $WD/src
  branch = publicGithubDevelop
  if(! test -d dftfe) {
    git clone -b $branch https://github.com/dftfeDevelopers/dftfe.git dftfe
  } if not {
    cd dftfe
    git fetch
    git checkout $branch
    git pull
  }
  cd dftfe
  rm -fr build
  SRC = `{pwd}
  mkdir build && cd build

  dealiiDir=$INST
  alglibDir=$INST/lib/alglib
  libxcDir=$INST
  spglibDir=$INST
  xmlIncludeDir=/usr/include/libxml2
  xmlLibDir=/usr/lib64

  ELPA_PATH=$INST
  DCCL_PATH=$NCCL_DIR
  TORCH_PATH=''

  #Compiler options and flags
  cxx_compiler = CC
  cxx_flags = '-march=znver3 -fPIC'
  cxx_flagsRelease = '-fPIC -target-accel=nvidia80 -I'$MPICH_DIR'/include'
  device_flags ='-I'$MPICH_DIR'/include -arch=sm_80'
  device_architectures =80


  # HIGHERQUAD_PSP option compiles with default or higher order
  # quadrature for storing pseudopotential data
  # ON is recommended for MD simulations with hard pseudopotentials

  # build type: "Release" or "Debug"
  build_type=Release
  out=`{echo $build_type | tr '[:upper:]' '[:lower:]'}

  # Note: MDI_PATH is not used by project.
  cmake_flags = ( \
      -DCMAKE_CXX_STANDARD=17 \
      -DCMAKE_CXX_COMPILER=$cxx_compiler \
      -DCMAKE_CXX_FLAGS=$cxx_flags \
      -DCMAKE_CXX_FLAGS_RELEASE=$cxx_flagsRelease \
      -DCMAKE_BUILD_TYPE=$build_type \
      -DDEAL_II_DIR=$dealiiDir \
      -DALGLIB_DIR=$alglibDir \
      -DLIBXC_DIR=$libxcDir \
      -DSPGLIB_DIR=$spglibDir \
      -DXML_LIB_DIR=$xmlLibDir \
      -DXML_INCLUDE_DIR=$xmlIncludeDir \
      -DWITH_MDI=OFF \
      -DMDI_PATH= \
      -DWITH_DCCL=OFF \
      -DWITH_TORCH=OFF \
      -DCMAKE_PREFIX_PATH=$ELPA_PATH';'$DCCL_PATH';'$TORCH_PATH \
      -DWITH_GPU=ON \
      -DGPU_LANG=cuda \
      -DGPU_VENDOR=nvidia \
      -DWITH_GPU_AWARE_MPI=OFF \
      -DCMAKE_CUDA_FLAGS=$device_flags \
      -DCMAKE_CUDA_ARCHITECTURES=$device_architectures \
      -DWITH_TESTING=OFF \
      -DMINIMAL_COMPILE=OFF \
      -DHIGHERQUAD_PSP=ON \
  )  

  fn cmake_real {
    mkdir -p real && cd real
    cmake $cmake_flags \
      -DWITH_COMPLEX=OFF \
      $1
    make -j8
    cd ..
  }

  fn cmake_cplx {
    mkdir -p complex && cd complex
    cmake $cmake_flags \
      -DWITH_COMPLEX=ON \
      $1
    make -j8
    cd ..
  }

  mkdir -p $out
  cd $out

  echo 'Building Real executable in $build_type mode...'
  cmake_real $SRC

  echo 'Building Complex executable in $build_type mode...'
  cmake_cplx $SRC

  echo 'Build complete.'
  cd $WD
}
